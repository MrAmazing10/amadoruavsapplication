import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
#import geopandas as gpd
from sklearn import metrics
from sklearn.cluster import DBSCAN

# initialize global empty list
points = []
#open file
def create_list(points):
    with open("no_outliers.txt","r") as file:

     for i, line in enumerate(file):
          #excludes line 1       
          if i == 0:
                continue
          
          values = line.strip()
          #split into lat + long then add to 2d list
          lat, long = values.split()
          points.append([float(lat), float(long)])

     return points
#runs function
points = create_list(points)

def cluster(points):
     #finds clusters with radius of .0001 around each point to find others, with minimum amt of samples in this process being 50(has to find 49 others total)
     db = DBSCAN(eps=.0001, min_samples=50).fit(points)
     labels = db.labels_
     print(labels)

     # Number of clusters in labels, ignoring noise if present.(exactly as from dbscan docs)
     n_clusters = len(set(labels)) - (1 if -1 in labels else 0)
     n_noise = list(labels).count(-1)
     print("Estimated number of clusters: %d" % n_clusters)
     print("Estimated number of noise points: %d" % n_noise)
     return n_clusters,n_noise,labels

cluster(points)
def plot(points):
    #sets x and y -values
    x = [i[0] for i in points]
    y = [j[1] for j in points]
    #creates plot
    df = plt.scatter(x, y)
    #saves as file for me to view
    plt.savefig('scatter_plot.png')
plot(points)

def centroid(points,labels):
     #creating 5 different lists where the clusters' respective points will go
     clusterpts_0, clusterpts_1, clusterpts_2, clusterpts_3, clusterpts_4 = [], [], [], [], []
     for i in range(len(points)):
          if labels[i] == 0:
               clusterpts_0.append(points[i])
          elif labels[i] == 1:
               clusterpts_1.append(points[i])
          elif labels[i] == 2:
               clusterpts_2.append(points[i])
          elif labels[i] == 3:
               clusterpts_3.append(points[i])
          elif labels[i] == 4:
               clusterpts_4.append(points[i])
     
